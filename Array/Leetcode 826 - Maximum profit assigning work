class Solution {
public:
    int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit, vector<int>& worker) {
        int n = profit.size(), m = worker.size(), ans = 0;
        
        // Brute force

        // for(int i=0; i<m; i++){
        //     int curr = 0;
        //     for(int j=0; j<n; j++){
        //         if(difficulty[j]<=worker[i] && profit[j]>curr) curr = profit[j];
        //     }
        //     ans += curr;
        // }



        // using max heap

        priority_queue<pair<int, int>> pq; //max heap of pairs

        for(int i=0; i<n; i++) pq.push({profit[i], difficulty[i]});

        sort(begin(worker), end(worker), greater<int>());

        int i = 0;
        while(i<m && !pq.empty()){
            if(pq.top().second>worker[i]) pq.pop();
            else {
                ans += pq.top().first;
                i++;
            }
        }


        return ans;
    }
};
