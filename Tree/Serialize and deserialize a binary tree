class Solution
{
    public:
    //Function to serialize a tree and return a list containing nodes of tree.
    int index = 0;
    void serializeInsert(Node *root, vector<int> &v){
        if(!root){v.push_back(-1); return;}
        v.push_back(root->data);
        serializeInsert(root->left, v);
        serializeInsert(root->right, v);
    }
    vector<int> serialize(Node *root) 
    {
        //Your code here
        vector<int> v;
        serializeInsert(root, v);
        
        return v;
    }
    
    //Function to deserialize a list and construct the tree.
    Node * deSerialize(vector<int> &A)
    {
       //Your code here
       if(index==A.size()) return NULL;
       int val = A[index];
       index++;
       if(val==-1) return NULL;
       
       Node *root = (Node*)malloc(sizeof(Node));
       
       root->data = val;
       root->left = root->right = NULL;
       
       root->left = deSerialize(A);
       root->right = deSerialize(A);
       
       return root;
    }

};
